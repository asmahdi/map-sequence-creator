# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapSequenceCreatorDialog
                                 A QGIS plugin
 This plug generates bulk maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-11-09
        git sha              : $Format:%H$
        copyright            : (C) 2024 by KARS
        email                : sabiqmahdi@ku.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import ( QgsProject, 
                        QgsPrintLayout, 
                        QgsReadWriteContext, 
                        QgsLayoutExporter, 
                        QgsRasterLayer,
                        QgsLayoutItemLabel,
                        QgsLayoutItemLegend,
                        QgsLayerTreeLayer,
                        QgsLayoutSize,
                        QgsUnitTypes,
                        QgsLayoutPoint,
                        QgsLegendStyle,
                        QgsMapLayerLegendUtils )

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtWidgets import QFileDialog, QDialogButtonBox
from qgis.PyQt.QtCore import QStringListModel,QEventLoop, QTimer
from PyQt5.QtGui import QColor,QFont
from qgis.PyQt.QtXml import QDomDocument
from qgis.utils import iface

import time
import re
from datetime import datetime



# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'map_sequence_creator_dialog_base.ui'))


class MapSequenceCreatorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MapSequenceCreatorDialog, self).__init__(parent)
        self.setupUi(self)
        self.layout = None
        self.selected_files = None
        self.layers = []
        self.export_folder = None
        self.template_path = None
        self.progress = 0
        self.color_map_path = None
        self.abort_export = False


        # DEBUG ----------------------------------------------------------------
        ## Paths can be set here for quick debugging
        self.color_map_path = "/Users/mahdi/Work/KARS/Qgis Projects/Colormap.qml"
        self.template_path = "/Users/mahdi/Work/KARS/Qgis Projects/Floodmap.qpt"
        self.export_folder = "/Users/mahdi/Work/KARS/export"
        # ----------------------------------------------------------------------


        # Initialize a QStringListModel to hold the list of file names
        self.model = QStringListModel()

        # Set the model for QListView
        self.fileListView.setModel(self.model)

        # Set on click methods for UI buttons  
        self.importRasterButton.clicked.connect(self.select_raster_files_dialog)
        self.selectLayoutButton.clicked.connect(self.select_layout_file)
        self.selectColorMapButton.clicked.connect(self.set_color_map)
        self.setExportDirButton.clicked.connect(self.open_export_path_dialog)
        self.exportButton.clicked.connect(self.export_layout_to_png)
        self.dialogButton.accepted.connect(self.on_ok)
        self.dialogButton.button(QDialogButtonBox.Abort).clicked.connect(self.on_abort) 
        self.dialogButton.button(QDialogButtonBox.Reset).clicked.connect(self.clear_all_data)
        self.clearRastersButton.clicked.connect(self.clear_rasters)
        
        # Connect other UI elements
        self.layoutPath.textChanged.connect(self.update_layout_path)
        self.exportDirPath.textChanged.connect(self.set_export_path)
        self.progressBar.setValue(self.progress)

        
        
    def extract_date_time(self,input_string):

        # Regular expression to find date and time patterns in the string
        date_time_pattern = r"(\d{2}_\d{2}_\d{4})_(\d{4})"

        # Search for the date and time
        match = re.search(date_time_pattern, input_string)
        if match:
            date_str = match.group(1)  # Extracts "05_20_2019"
            time_str = match.group(2)  # Extracts "2000"
            
            # Convert to a datetime object
            date_time_obj = datetime.strptime(f"{date_str}_{time_str}", "%m_%d_%Y_%H%M")
            
            print("Date and Time:", date_time_obj)
            return date_time_obj
        else:
            print("Date and time not found in the input string.")
            
        

    def save_raster_images( self, image_paths):
        # Create a raster layer from the image file
        for image_path in image_paths:
            raster_layer = QgsRasterLayer(image_path, os.path.basename(image_path))
            
            # Check if the layer is valid
            if not raster_layer.isValid():
                print(f"Failed to load the raster image: {image_path}")
                return None
            
            # Add the layer to the project

            self.layers.append(raster_layer)

    def add_legend(self,layout,layer):

        # Create a Legend item in the Layout
        legend = QgsLayoutItemLegend(layout)

        # Set custom title here
        # legend.setTitle("Custom Legend Title")  

        # Additional Legend settings
        legend.setFrameEnabled(True) 
        legend.setBackgroundColor(QColor("white")) 
        legend.setLegendFilterByMapEnabled(False)
        legend.setAutoUpdateModel(False)

        # Create a style for legend
        legend_style = QgsLegendStyle()

        # Set the font for the legend
        font = QFont("Helvetica", 12)  # Font set to Helvetica with size 12
        font.setBold(True)  # Make the font bold
        legend_style.setFont(font)  # Apply font to the legend 

        # Apply the styling to the legend
        legend.setStyle(QgsLegendStyle.Style.Subgroup,legend_style)

        # Set legend size and position
        legend.attemptMove(QgsLayoutPoint(5, 5, QgsUnitTypes.LayoutMillimeters))
        legend.attemptResize(QgsLayoutSize(60, 60, QgsUnitTypes.LayoutMillimeters))

        # Get the group item from the Legend and clean it
        group = legend.model().rootGroup()
        group.clear()

        # Rename the layer Name in Legend
        layer_node = QgsLayerTreeLayer(layer)
        group.addChildNode(layer_node)
        layer_node.setName("Flood Depth (ft)")

        # hide the node with label: Band 1 (Gray)
        root = group.findLayer(layer)
        if isinstance(layer, QgsRasterLayer):
            nodes = legend.model().layerLegendNodes(root)
            if nodes[0].data(0) == 'Band 1 (Gray)':
                indexes = list(range(1, len(nodes)))
                QgsMapLayerLegendUtils.setLegendNodeOrder(root, indexes)
                legend.model().refreshLayerLegend(root)
                print("Cleared Band name from Legend.")

        # Add the legend item to the layout
        layout.addLayoutItem(legend)

    def add_timestamp_label(self,layout,label_text):
        # Create a label item
        label = QgsLayoutItemLabel(layout)
        label.setText(label_text)  # Set the label text
        font = QFont("Helvetica", 24)  # Set your font family and size
        font.setBold(True) 
        label.setFont(font)  # Set the font and size
        label.adjustSizeToText()  # Adjust the item size to fit the text

        layout_size = layout.pageCollection().page(0).pageSize()  # Get the size of the first page
        layout_height = layout_size.height()

        # Set position in layout (x and y in millimeters)
        label.attemptMove(QgsLayoutPoint(10, layout_height-15, QgsUnitTypes.LayoutMillimeters))
        label.attemptResize(QgsLayoutSize(100, 30, QgsUnitTypes.LayoutMillimeters))

        # Add the label item to the layout
        layout.addLayoutItem(label)


    def set_color_map(self):
        self.color_map_path,_ = QFileDialog.getOpenFileName(
            self,
            "Select Color Map File",
            "",
            "All Files (*)"
        )
        self.colorMapPath.setText(self.color_map_path)
    

    def apply_color_map(self,layer):

        # Load the color map from path 
        layer.loadNamedStyle(self.color_map_path)

        # Refresh the layer to update the map canvas
        layer.triggerRepaint()
    

    def load_raster_and_wait(self,path):

        # Add the layer to the project
        layer = QgsRasterLayer(path, os.path.basename(path))
        QgsProject.instance().addMapLayer(layer)

        # Check if the layer is valid
        if not layer.isValid():
            print(f"Failed to load layer: {path}")
            return None

        # Start an event loop to check if the layer is loaded
        loop = QEventLoop()

        def check_layer_loaded():
            if layer.isValid():
                print(f"Layer {layer.name()} loaded successfully.")
                loop.quit()
            else:
                print("Layer not yet ready...")
        
        # Create a QTimer to check the layer's loaded status every 1 milliseconds
        timer = QTimer()
        timer.timeout.connect(check_layer_loaded)
        timer.start(1)

        # Execute the event loop and wait for the layer to be ready
        loop.exec_()

        # Stop the timer once we're done
        timer.stop()

        self.apply_color_map(layer)
        return layer
    
    
    def remove_raster_layers(self):
        
        layers = QgsProject.instance().mapLayers().values()
        for layer in self.layers:
            QgsProject.instance().removeMapLayer(layer)
        
        
    def select_raster_files_dialog(self):
        # Open a file dialog to select an image file
        file_paths, _ = QFileDialog.getOpenFileNames(
            self,
            "Select Image Files",
            "",
            "Image Files (*.png *.jpg *.jpeg *.tif *tiff);;All Files (*)"
        )
        # Extract just the file names (without the full paths)
        file_names = [os.path.basename(path) for path in file_paths]
        
        # Set the list of file names in the QStringListModel
        self.model.setStringList(file_names)
        self.selected_files = file_paths
        self.save_raster_images(file_paths)

    
    def select_layout_file(self):
        # Open file dialog to select a QGIS layout template file (.qpt)
        self.template_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select QGIS Layout Template",
            "",
            "QGIS Layout Templates (*.qpt);;All Files (*)"
        )

        # Display layout path
        self.layoutPath.setText(self.template_path)  
    
    def update_layout_path(self):
        self.template_path = self.layoutPath.text()


    def load_layout_template(self, template_path):
        """Loads a QGIS layout template (.qpt file) into the current project."""
        # Create a new layout
        layout = QgsPrintLayout(QgsProject.instance())
        layout.initializeDefaults()

        # Set the layout name based on the file name and display it in layoutNameLineEdit
        layout_name = os.path.basename(template_path).replace(".qpt", "")
        layout.setName(layout_name)
        # self.layoutName.setText(layout_name)  # Display layout name

        # Read and parse the template file
        with open(template_path, 'r') as template_file:
            template_content = template_file.read()

        # Parse the template using QDomDocument
        doc = QDomDocument()
        doc.setContent(template_content)

        # Create a QgsReadWriteContext for loading the template
        context = QgsReadWriteContext()

        # Load layout from template document
        layout.loadFromTemplate(doc, context)

        QgsProject.instance().layoutManager().addLayout(self.layout)

        return layout

        



    def open_export_path_dialog(self):

        # Open a folder dialog to select a folder for export
        self.export_folder = QFileDialog.getExistingDirectory(self, "Select Export Folder")
        self.exportDirPath.setText(self.export_folder)
    
    def set_export_path(self):
        self.export_folder = self.exportDirPath.text()

    def export_layout_to_png(self):

        if self.export_folder:
            self.abort_export = False
            
            # Loop through the selected image files and export the layout for each
            for i, image_path in enumerate(self.selected_files): 

                if self.abort_export:
                    self.progress = 0
                    self.progressBar.setValue(self.progress)
                    break
                    
                print(f"Processing raster {i+1}: {image_path}")
                max_items = len(self.selected_files)

                layout = self.load_layout_template(self.template_path)

                # Step 1: Load the raster and wait for it to be ready
                layer = self.load_raster_and_wait(image_path)
                if not layer:
                    continue

                self.add_legend(layout,layer)

                time_object = self.extract_date_time(os.path.basename(self.selected_files[i]))
                timestamp_label = f"{time_object}"
                self.add_timestamp_label(layout,timestamp_label)

                export_path = os.path.join(self.export_folder, f"{os.path.basename(self.selected_files[i])}{i+1}.png")  # Create a file path with the image index
                
                self.exporter = QgsLayoutExporter(layout)
                self.exporter.exportToImage(export_path,QgsLayoutExporter.ImageExportSettings())  # Export layout to the specified path
                
                QgsProject.instance().removeMapLayer(layer.id())
                print(f"Exported layout to: {export_path}")

                self.progress = int(((i+1)/max_items)*100)
                self.progressBar.setValue(self.progress)
                  

    def on_ok(self):

        self.clear_all_data()
        # Close the dialog
        self.accept()

    def on_abort(self):
        self.abort_export = True
        

    def clear_rasters(self):
        self.remove_raster_layers()
        
        self.model.setStringList([])
        self.selected_files = []
        self.layers = []


    def clear_all_data(self):
        # Clear the raster layers from the project
        self.remove_raster_layers()

        # Reset the selected files and model
        self.selected_layers = []  # Clear the selected layers list
        self.model.setStringList([])  # Clear the file list in the view

        # Reset the color map
        self.color_map_path = None
        self.colorMapPath.clear()

        # Reset layout name line edit
        self.layoutPath.clear()
        
        # Optionally, reset other UI elements
        self.fileListView.clearSelection()  # Clear selection in the list view

        # Reset any other fields if needed
        self.layout = None

        self.export_folder = None
        self.exportDirPath.clear()

        self.progress = 0
        self.progressBar.setValue(0)
        print("All data cleared.")